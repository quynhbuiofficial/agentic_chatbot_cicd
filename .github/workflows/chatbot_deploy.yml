name: Chatbot CI/CD

on:
  workflow_dispatch:

jobs:
  Chatbot-CI-CD:
    name: Chatbot CI/CD
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'us-east-1'
      TF_VERSION: '1.12.1'

    steps:
    - name: 'checkout github repository'
      uses: actions/checkout@v4

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: cd iac_using_terraform && terraform init

    - name: Debug Terraform Output
      run: |
        cd iac_using_terraform
        terraform output -raw aws_frontend_ip
        
    - name: Set Frontend IP is GITHUB_ENV -> EC2_PUBLIC_IP
      run: |
        echo "${{ secrets.KEYPAIR_PRIVATE }}" > keypair.pem
        chmod 600 keypair.pem

        cd iac_using_terraform
        EC2_IP=$(terraform output -raw aws_frontend_ip | cut -d ':' -f1 | tr -d '\r\n' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
        echo "FRONDEND IP: $EC2_IP"
        echo "EC2_PUBLIC_IP=$EC2_IP" >> "$GITHUB_ENV"

    - name: Sử dụng EC2_PUBLIC_IP
      run: |
        echo "ENV: ${{ env.EC2_PUBLIC_IP }}"

    - name: Pull & Run Image chatbot_frontend from DockerHub in EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i keypair.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'

          if ! command -v docker &> /dev/null; then
            sudo apt update && sudo apt upgrade -y
            sudo apt install docker.io -y
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          sudo docker pull quynhsydaole/chatbot_frontend:latest

          sudo docker rm -f chatbot_frontend || true
      
          sudo docker run -d --name chatbot_frontend -p 5173:5173 -e VITE_API_URL=http://alb-backend-137276441.us-east-1.elb.amazonaws.com -e VITE_LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }} -e VITE_LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }} -e VITE_LANGFUSE_BASEURL=https://cloud.langfuse.com quynhsydaole/chatbot_frontend:latest
        EOF
        
    - name: Set ELASTICSEARCH IP is GITHUB_ENV -> ELASTICSEARCH_IP
      run: |
        cd iac_using_terraform
        EC2_IP=$(terraform output -raw elasticsearch_private_ip | cut -d ':' -f1 | tr -d '\r\n' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
        echo "ELASTICSEARCH IP: $EC2_IP"
        echo "ELASTICSEARCH_IP=$EC2_IP" >> "$GITHUB_ENV"

    - name: Pull & Run Image ELASTICSEARCH in EC2
      run: |
        echo "EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}"
        echo "ELASTICSEARCH_IP: ${{ env.ELASTICSEARCH_IP }}"

        scp -o StrictHostKeyChecking=no -i keypair.pem keypair.pem ubuntu@${{ env.EC2_PUBLIC_IP }}:/home/ubuntu/    
        
        ssh -o StrictHostKeyChecking=no -i keypair.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
        chmod 600 ~/keypair.pem

        ssh -o StrictHostKeyChecking=no -i ~/keypair.pem ubuntu@${{ env.ELASTICSEARCH_IP }} << 'INNER_EOF'
      
        if ! command -v docker &> /dev/null; then
          sudo apt update && sudo apt upgrade -y
          sudo apt install docker.io -y
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

        docker run -d -p 9200:9200 -d --name elasticsearch -e "discovery.type=single-node" -e "xpack.security.enabled=false" -e "xpack.license.self_generated.type=trial" -v "elasticsearch-data:/usr/share/elasticsearch/data" docker.elastic.co/elasticsearch/elasticsearch:8.15.0

        INNER_EOF
        EOF
